apply plugin: 'com.android.application'
apply from: project(':libaxmol').projectDir.toString() + "/axutils.gradle"

android {
    // Resolve build profiles
    def buildProfiles = AxmolUtils.resolveBuildProfiles(project)
    def packageName = "com.chilli.revenge"
    def cmakeVer = buildProfiles['cmakeVer']
    def cmakeOptions = Eval.me(buildProfiles['cmakeOptions'])
    def minSdk = buildProfiles['minSdk']
    def targetSdk = buildProfiles['targetSdk']

    // Apply build profiles
    namespace packageName
    compileSdk targetSdk.toInteger()
    ndkVersion = buildProfiles['ndkVer']
    if(buildProfiles.containsKey('ndkPath')) {
        ndkPath = buildProfiles['ndkPath']
    }

    defaultConfig {
        applicationId packageName
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionCode 2000053
        versionName "2.0.10"

        externalNativeBuild {
            cmake {
                arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_shared", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", "-DTME=DDR"
                arguments.addAll(cmakeOptions)
                cppFlags "-frtti -fexceptions -fsigned-char"
            }
        }

        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "build/assets"
    }

    externalNativeBuild {
        cmake {
            version "$cmakeVer"
            path "../../CMakeLists.txt"
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
        }
    }

    aaptOptions {
       noCompress 'mp3','ogg','wav','mp4','ttf','ttc'
    }

    buildFeatures {
        aidl true
    }
}

android.applicationVariants.configureEach { variant ->
    def variantName = variant.name.capitalize()
    def variantAssets = variant.flavorName

    tasks.register("copy${variantName}ContentToAssets") {
        doFirst {
            delete "${projectDir}/build/assets"
        }
        doLast {
            copy {
                from "${projectDir}/../../Content"
                into "${projectDir}/build/assets"
                exclude "**/*.gz"
            }
            copy {
                from "${projectDir}/build/runtime/axslc"
                into "${projectDir}/build/assets/axslc"
            }
            copy {
                from "${projectDir}/../../Resources"
                into "${projectDir}/build/assets"
                exclude "**/*.gz"
            }
            copy {
                from "${projectDir}/../../Resources-revenge"
                into "${projectDir}/build/assets"
                exclude "**/*.gz"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':libaxmol')
}

project.afterEvaluate {
    android.applicationVariants.configureEach { variant ->
        def variantName = variant.name.capitalize()
        def externalNativeBuild = tasks.named("externalNativeBuild${variantName}")
        if (externalNativeBuild) {
            def copyContentToAssets = tasks.named("copy${variantName}ContentToAssets")
            copyContentToAssets
            copyContentToAssets.get().dependsOn externalNativeBuild
            tasks.named("compile${variantName}JavaWithJavac").get().dependsOn copyContentToAssets
        }
    }
}
